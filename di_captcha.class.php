<?php
// В конструкторе задаётся длина строки символов, по умолчанию 6.
// методы класса:
// shuffle2() – перемешивает массив.
// set() – может менять значения некоторых полей класса.
// get() – возвращает массив координат и заносит в сессию саму строку.
// check() – принимает введённый пользователем текст и сравнивает его со строкой, записанной в сессии.
namespace di;
class captcha {
private $str, $array_str = array(), $abc = array(), $the_number_of_letters = 6, $noise = 1;
function __construct($the_number_of_letters = 6) {  $this->the_number_of_letters = $the_number_of_letters;
  $this->abc['a'] = array(4,1,3,2,5,2,3,3,5,3,2,4,6,4,2,5,3,5,4,5,5,5,6,5,1,6,7,6,1,7,7,7);
  $this->abc['b'] = array(1,1,2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,1,4,2,4,3,4,4,4,5,4,6,4,1,5,7,5,1,6,7,6,1,7,2,7,3,7,4,7,5,7,6,7);
  $this->abc['c'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,1,4,1,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['d'] = array(1,1,2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,1,4,7,4,1,5,7,5,1,6,7,6,1,7,2,7,3,7,4,7,5,7,6,7);
  $this->abc['e'] = array(1,1,2,1,3,1,4,1,5,1,6,1,7,1,1,2,1,3,1,4,2,4,3,4,4,4,1,5,1,6,1,7,2,7,3,7,4,7,5,7,6,7,7,7);
  $this->abc['f'] = array(1,1,2,1,3,1,4,1,5,1,6,1,7,1,1,2,1,3,1,4,2,4,3,4,4,4,1,5,1,6,1,7);
  $this->abc['g'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,1,4,1,5,5,5,6,5,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['h'] = array(1,1,7,1,1,2,7,2,1,3,7,3,1,4,2,4,3,4,4,4,5,4,6,4,7,4,1,5,7,5,1,6,7,6,1,7,7,7);
  $this->abc['i'] = array(1,1,2,1,3,1,4,1,5,1,6,1,7,1,4,2,4,3,4,4,4,5,4,6,1,7,2,7,3,7,4,7,5,7,6,7,7,7);
  $this->abc['j'] = array(7,1,7,2,7,3,7,4,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['k'] = array(1,1,7,1,1,2,5,2,6,2,1,3,3,3,4,3,1,4,2,4,1,5,3,5,4,5,1,6,5,6,6,6,1,7,7,7);
  $this->abc['l'] = array(1,1,1,2,1,3,1,4,1,5,1,6,1,7,2,7,3,7,4,7,5,7,6,7,7,7);
  $this->abc['m'] = array(1,1,7,1,1,2,2,2,6,2,7,2,1,3,3,3,5,3,7,3,1,4,4,4,7,4,1,5,7,5,1,6,7,6,1,7,7,7);
  $this->abc['n'] = array(1,1,7,1,1,2,2,2,7,2,1,3,3,3,7,3,1,4,4,4,7,4,1,5,5,5,7,5,1,6,6,6,7,6,1,7,7,7);
  $this->abc['o'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,1,4,7,4,1,5,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['p'] = array(1,1,2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,1,4,2,4,3,4,4,4,5,4,6,4,1,5,1,6,1,7);
  $this->abc['q'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,1,4,7,4,1,5,5,5,7,5,1,6,6,6,2,7,3,7,4,7,5,7,7,7);
  $this->abc['r'] = array(1,1,2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,1,4,2,4,3,4,4,4,5,4,6,4,1,5,5,5,1,6,6,6,1,7,7,7);
  $this->abc['s'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,2,4,3,4,4,4,5,4,6,4,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['t'] = array(1,1,2,1,3,1,4,1,5,1,6,1,7,1,4,2,4,3,4,4,4,5,4,6,4,7);
  $this->abc['u'] = array(1,1,7,1,1,2,7,2,1,3,7,3,1,4,7,4,1,5,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['v'] = array(1,1,7,1,1,2,7,2,2,3,6,3,2,4,6,4,3,5,5,5,3,6,5,6,4,7);
  $this->abc['w'] = array(1,1,7,1,1,2,7,2,1,3,7,3,1,4,4,4,7,4,1,5,3,5,5,5,7,5,1,6,2,6,6,6,7,6,1,7,7,7);
  $this->abc['x'] = array(1,1,7,1,2,2,6,2,3,3,5,3,4,4,3,5,5,5,2,6,6,6,1,7,7,7);
  $this->abc['y'] = array(1,1,7,1,2,2,6,2,3,3,5,3,4,4,4,5,4,6,4,7);
  $this->abc['z'] = array(1,1,2,1,3,1,4,1,5,1,6,1,7,1,6,2,5,3,4,4,3,5,2,6,1,7,2,7,3,7,4,7,5,7,6,7,7,7);
  $this->abc['0'] = array(3,1,4,1,5,1,2,2,6,2,1,3,5,3,7,3,1,4,4,4,7,4,1,5,3,5,7,5,2,6,6,6,3,7,4,7,5,7);
  $this->abc['1'] = array(4,1,3,2,4,2,2,3,4,3,4,4,4,5,4,6,1,7,2,7,3,7,4,7,5,7,6,7,7,7);
  $this->abc['2'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,7,3,6,4,4,5,5,5,2,6,3,6,1,7,2,7,3,7,4,7,5,7,6,7,7,7);
  $this->abc['3'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,7,3,5,4,6,4,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['4'] = array(5,1,4,2,5,2,3,3,5,3,2,4,5,4,1,5,2,5,3,5,4,5,5,5,6,5,7,5,5,6,5,7);
  $this->abc['5'] = array(1,1,2,1,3,1,4,1,5,1,6,1,7,1,1,2,1,3,2,3,3,3,4,3,5,3,6,3,7,4,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['6'] = array(3,1,4,1,5,1,6,1,2,2,1,3,1,4,2,4,3,4,4,4,5,4,6,4,1,5,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['7'] = array(1,1,2,1,3,1,4,1,5,1,6,1,7,1,6,2,5,3,4,4,3,5,2,6,1,7);
  $this->abc['8'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,2,4,3,4,4,4,5,4,6,4,1,5,7,5,1,6,7,6,2,7,3,7,4,7,5,7,6,7);
  $this->abc['9'] = array(2,1,3,1,4,1,5,1,6,1,1,2,7,2,1,3,7,3,2,4,3,4,4,4,5,4,6,4,7,4,7,5,6,6,2,7,3,7,4,7,5,7);
}

private function shuffle2($array) {
  for ($i = 0; $i < count($array); $i += 2)    for ($j = count($array)-2; $j > $i; $j -= 2)
      if (mt_rand(0, 1) > 0) {
        $array[$i]+=$array[$j]; $array[$j]=$array[$i]-$array[$j]; $array[$i]-=$array[$j];
        $array[$i+1]+=$array[$j+1]; $array[$j+1]=$array[$i+1]-$array[$j+1]; $array[$i+1]-=$array[$j+1];      }
  return $array;}

function set($name, $val) {
  switch ($name) {    case 'the_number_of_letters':
      $this->the_number_of_letters = (int)$val;
      break;
    case 'noise':
      $this->noise = (int)$val;
      break;
    default:
      return false;
  }
  return true;}

function get() {
  $alphanum = 'abcdefghijkmnopqrstuvxyz0123456789';
  unset($_SESSION['di_captcha_str']);
  for ($i = 0; $i < $this->the_number_of_letters; ++$i) {
    $letter = $alphanum[intval(mt_rand(0, 33))];
    //foreach ($this->abc[$letter] as $key=>$val)
    //  array_push($this->array_str, ($key%2 == 0)?$val+($i*7):$val);
    for ($j = 0; $j < count($this->abc[$letter]); $j += 2)
      if (mt_rand(1, 100) > $this->noise*5)
        array_push($this->array_str, $this->abc[$letter][$j]+($i*7), $this->abc[$letter][$j+1]);
    for ($j = 0; $j < 7*7*($this->noise/20); ++$j) {      array_push($this->array_str, mt_rand(1, 7)+($i*7), mt_rand(1, 7));
    }
    $_SESSION['di_captcha_str'] .= $letter;
  }
  return $this->shuffle2($this->array_str);}

function check($in_string) {
echo $in_string.'|'.$_SESSION['di_captcha_str'];
  return (strtolower($in_string) == $_SESSION['di_captcha_str'])?true:false;}
}
?>